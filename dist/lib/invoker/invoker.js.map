{"version":3,"sources":["lib/invoker/invoker.ts"],"names":[],"mappings":"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","file":"invoker.js","sourcesContent":["/**\r\n * Created by Greg on 26/09/2016.\r\n */\r\n//he invoker is a module responsible for constructing invocation lists.\r\nimport _ = require('lodash');\r\nimport Immutable = require('immutable');\r\nimport {SymbolFactory} from '../helpers';\r\nexport class InvokerError extends Error{\r\n\tconstructor(message ?: string) {\r\n\t\tsuper(message);\r\n\t}\r\n\tname = \"InvokerError\";\r\n}\r\nlet invokerSymbols = new SymbolFactory(\"react-ts2.invoker\");\r\nexport module Invoker {\r\n\r\n\t//the invoker cache.\r\n\tvar invokers: any = {};\r\n\r\n\t/**\r\n\t * Retrieves the invocation symbol for a member with the given name.\r\n\t * @param name The name of the member.\r\n\t * @returns {symbol} The invocation symbol.\r\n\t */\r\n\tfunction getSymbol(name: string) {\r\n\t\treturn invokerSymbols.symbolFor(name);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an invoker for a member with the specified string name.\r\n\t *\r\n\t * @description\r\n\t * The invoker is a small function that is placed in a key managed by an invocation list.\r\n\t * The invoker accesses the invocation list on the `this` instance and invokes every element using its arguments.\r\n\t * Each string key (and corresponding invocation symbol) has its own invoker, and invokers for the same key on different objects are the same.\r\n\t * @param name The name for which to get the invoker.\r\n\t * @returns {Function} The invoker function.\r\n\t */\r\n\tfunction getInvoker(name: string): Function {\r\n\t\tlet symbol = getSymbol(name);\r\n\t\tif (invokers[symbol]) {\r\n\t\t\treturn invokers[symbol];\r\n\t\t}\r\n\t\treturn invokers[symbol] = function () {\r\n\t\t\t//this will be the instance this function was called on, not the module or the function object\r\n\t\t\tlet invocationList = this[symbol] as Immutable.List<Function>;\r\n\r\n\t\t\tif (!Immutable.List.isList(invocationList)) {\r\n\t\t\t\tthrow new InvokerError(`The invoker for ${name} failed: the invocation list ${invocationList} was invalid.`);\r\n\t\t\t}\r\n\t\t\tlet args = arguments;\r\n\t\t\tlet result: any;\r\n\t\t\tinvocationList.forEach(func => result = func.apply(this, args))\r\n\t\t\t//undefined is always returned!\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Attaches a new function to the invocation list of a member in the given instance.\r\n\t *\r\n\t * @description\r\n\t * This function makes the specified member managed by an invocation list.\r\n\t * Functions can be added to the invocation list for execution, and when the member with this name is called, every function in the invocation list is called in sequence.\r\n\t *\r\n\t * @param thisObj The `this` instance\r\n\t * @param memberName The name of the member to manage.\r\n\t * @param newFunction The new function to add to the invoc list.\r\n\t */\r\n\texport function addFunction(thisObj: any, memberName: string, newFunction: Function) {\r\n\t\tif (!_.isFunction(newFunction)) {\r\n\t\t\tthrow new InvokerError(`expected a function, but got ${newFunction}!`);\r\n\t\t}\r\n\t\tif (!memberName || !_.isString(memberName)) {\r\n\t\t\tthrow new InvokerError(`expected a member name, but got '${memberName}!'`)\r\n\t\t}\r\n\r\n\t\tif (!_.isObject(thisObj)) {\r\n\t\t\tthrow new InvokerError(`${thisObj} must be a proper object!`)\r\n\t\t}\r\n\r\n\t\tlet descriptor = Object.getOwnPropertyDescriptor(thisObj, memberName);\r\n\t\tif (descriptor) {\r\n\t\t\tif (!descriptor.writable) {\r\n\t\t\t\tthrow new InvokerError(`${memberName} is not writable!`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet symbol = getSymbol(memberName);\r\n\t\tlet invoker = getInvoker(memberName);\r\n\t\tlet ownList = thisObj[symbol] as Immutable.List<Function>;\r\n\t\tlet ownFunction = thisObj[memberName];\r\n\r\n\t\tif (ownFunction !== undefined && !_.isFunction(ownFunction)) {\r\n\t\t\tthrow new InvokerError(`failed to add ${newFunction} to the invocation list of ${thisObj}.${memberName}.\r\nThe previous occupant is ${ownFunction}, which isn't a function.`)\r\n\t\t}\r\n\t\telse if (ownList && ownFunction === invoker) {\r\n\t\t\t//the invocation list exists and the current occupant is the invoker for the member\r\n\r\n\t\t\townList = ownList.push(newFunction);\r\n\t\t} else if (ownList && ownFunction !== invoker) {\r\n\t\t\t//the invocation list exists, but the current function is not the invoker\r\n\t\t\t//meaning it was overriden. We have to create a new invocation list based on the old function.\r\n\r\n\t\t\townList = Immutable.List.of(ownFunction, newFunction)\r\n\t\t} else if (!ownList && !ownFunction) {\r\n\t\t\t//there is no invocation list and there is no function with that name.\r\n\t\t\townList = Immutable.List.of(newFunction);\r\n\t\t} else if (!ownList && ownFunction === invoker) {\r\n\t\t\t//there is no invocation list but there is a function and it is an invoker\r\n\t\t\t//this is a strange error.\r\n\t\t\tthrow new Error(`invalid state: the member ${thisObj}.${memberName} is an invoker but there is no invocation list to invoke.`)\r\n\t\t} else if (!ownList && ownFunction) {\r\n\t\t\t//there is no invocation list but there is a function.\r\n\t\t\townList = Immutable.List.of(ownFunction, newFunction);\r\n\t\t}\r\n\r\n\t\tthisObj[memberName] = invoker;\r\n\t\tthisObj[symbol] = ownList;\r\n\t\t//if the invoker is in place, nothing should be done.\r\n\t}\r\n}"],"sourceRoot":"/src"}